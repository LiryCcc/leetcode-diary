/**
 36. 有效的数独
尝试过
中等
相关标签
premium lock icon
相关企业
请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。

数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）


注意：

一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
空白格用 '.' 表示。


示例 1：


输入：board =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：true
示例 2：

输入：board =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
输出：false
解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 */

const isValid = (s: string[]): boolean => {
  const set = new Set<number>();
  // 判断是否1-9各自只出现一次
  for (const c of s) {
    const n = Number(c);
    if (isNaN(n)) {
      continue;
    } else {
      if (set.has(n)) {
        return false;
      } else {
        set.add(n);
      }
    }
  }
  return true;
};

function isValidSudoku(board: string[][]): boolean {
  // 1. 横向
  for (const edge of board) {
    if (isValid(edge)) {
      continue;
    } else {
      return false;
    }
  }
  // 2. 竖向
  // 先转换为横向
  const h: string[][] = [];
  board.forEach((edge) => {
    edge.forEach((v, i) => {
      if (h[i]) {
        h[i].push(v);
      } else {
        h[i] = [v];
      }
    });
  });
  // 验证
  for (const edge of h) {
    if (isValid(edge)) {
      continue;
    } else {
      return false;
    }
  }

  // 3. 把九宫格转换为横向然后判断
  const s: string[][] = [];
  board.forEach((edge, edgeK) => {
    edge.forEach((v, i) => {
      const k = Math.floor(edgeK / 3) * 3 + Math.floor(i / 3);
      if (s[k]) {
        s[k].push(v);
      } else {
        s[k] = [v];
      }
    });
  });
  for (const edge of s) {
    if (isValid(edge)) {
      continue;
    } else {
      return false;
    }
  }

  return true;
}

const case1 = [
  ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
  ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
  ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
  ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
  ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
  ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
  ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
  ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
  ['.', '.', '.', '.', '8', '.', '.', '7', '9']
];

const case2 = [
  ['8', '3', '.', '.', '7', '.', '.', '.', '.'],
  ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
  ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
  ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
  ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
  ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
  ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
  ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
  ['.', '.', '.', '.', '8', '.', '.', '7', '9']
];

const case3 = [
  ['.', '.', '.', '.', '5', '.', '.', '1', '.'],
  ['.', '4', '.', '3', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '3', '.', '.', '1'],
  ['8', '.', '.', '.', '.', '.', '.', '2', '.'],
  ['.', '.', '2', '.', '7', '.', '.', '.', '.'],
  ['.', '1', '5', '.', '.', '.', '.', '.', '.'],
  ['.', '.', '.', '.', '.', '2', '.', '.', '.'],
  ['.', '2', '.', '9', '.', '.', '.', '.', '.'],
  ['.', '.', '4', '.', '.', '.', '.', '.', '.']
];

console.log(isValidSudoku(case1) === true); // pass
console.log(isValidSudoku(case2) === false); // pass
console.log(isValidSudoku(case3) === false); // fail

export default isValidSudoku;
